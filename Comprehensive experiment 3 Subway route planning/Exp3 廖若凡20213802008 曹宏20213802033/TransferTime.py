import copy
import Adjacent
'''
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
以下为求最少换乘次数路径使用的函数(不包括dijksrta算法)
'''

'''
用于得到地铁线的特殊图
将原图中所有站点的边删除,新建以地铁线为名的点,将所有站点与所属地铁线的点相连,得到地铁线的特殊图
'''


def get_lineGraph(graph):
    # 对原图进行深拷贝以初始化地铁线图
    lineGraph = copy.deepcopy(graph)
    # 将原图中所有站点的边删除,新建以地铁线为名的点,将所有站点与所属地铁线的点相连并将边的权设为1
    for i in graph:
        lineGraph[i].subgraph = {}
        for j in graph[i].line:
            if lineGraph.get(j, None) is None:
                lineGraph[j] = Adjacent.Station(j)
            lineGraph[j].subgraph[i] = 1
            lineGraph[i].subgraph[j] = 1
    return lineGraph


'''
用于得到最少换乘次数的完全路径
对dijksrta算法处理后的最少换乘次数路径进行分割,得到子路径起点终点的列表和子路径所属地铁线的列表
根据lineStaion字典中的数据和子路径起点终点,采用切片的方法对子路径进行补全
'''


def get_transferPath(path):
    lineStation = {
        '广州地铁1号线': ['广州东站', '体育中心', '体育西路', '杨箕', '东山口', '烈士陵园', '农讲所', '公园前',
                          '西门口', '陈家祠', '长寿路', '黄沙', '芳村', '花地湾', '坑口', '西塱'],
        '广州地铁2号线': ['广州南站', '石壁', '会江', '南浦', '洛溪', '南洲', '东晓南', '江泰路', '昌岗', '江南西',
                          '市二宫', '海珠广场', '公园前', '纪念堂', '越秀公园', '广州火车站', '三元里', '飞翔公园',
                          '白云公园', '白云文化广场', '萧岗', '江夏', '黄边', '嘉禾望岗'],
        '广州地铁3号线': ['番禺广场', '市桥', '汉溪长隆', '大石', '厦滘', '沥滘', '大塘', '客村', '广州塔', '珠江新城',
                          '体育西路', '石牌桥', '岗顶', '华师', '五山', '天河客运站'],
        '广州地铁3号线北延段': ['机场北', '机场南', '高增', '人和', '龙归', '嘉禾望岗', '白云大道北', '永泰', '同和',
                                '京溪南方医院', '梅花园', '燕塘', '广州东站', '林和西', '体育西路'],
        '广州地铁4号线': ['南沙客运港', '南横', '塘坑', '大涌', '广隆', '飞沙角', '金洲', '蕉门', '黄阁', '黄阁汽车城',
                          '庆盛', '东涌', '低涌', '海傍', '石碁', '新造', '大学城南', '大学城北', '官洲', '万胜围',
                          '车陂南', '车陂', '黄村'],
        '广州地铁5号线': ['滘口', '坦尾', '中山八', '西场', '西村', '广州火车站', '小北', '淘金', '区庄', '动物园',
                          '杨箕', '五羊邨', '珠江新城', '猎德', '潭村', '员村', '科韵路', '车陂南', '东圃', '三溪',
                          '鱼珠', '大沙地', '大沙东', '文冲'],
        '广州地铁6号线': ['浔峰岗', '横沙', '沙贝', '河沙', '坦尾', '如意坊', '黄沙', '文化公园', '一德路', '海珠广场',
                          '北京路', '团一大广场', '东湖', '东山口', '区庄', '黄花岗', '沙河顶', '天平架', '燕塘',
                          '天河客运站', '长湴', '植物园', '龙洞', '柯木塱', '高塘石', '黄陂', '金峰', '暹岗', '苏元',
                          '萝岗', '香雪'],
        '广州地铁7号线': ['美的大道', '北滘公园', '美的', '南涌', '锦龙', '陈村', '陈村北', '大洲', '广州南站', '石壁',
                          '谢村', '钟村', '汉溪长隆', '南村万博', '员岗', '板桥', '大学城南'],
        '广州地铁8号线': ['万胜围', '琶洲', '新港东', '磨碟沙', '赤岗', '客村', '鹭江', '中大', '晓港', '昌岗',
                          '宝岗大道', '沙园', '凤凰新村', '同福西', '文化公园', '华林寺', '陈家祠', '彩虹桥', '鹅掌坦',
                          '同德', '上步', '聚龙', '石潭', '小坪', '石井', '亭岗', '滘心'],
        '广州地铁9号线': ['飞鹅岭', '花都汽车城', '广州北站', '花城路', '花果山公园', '花都广场', '马鞍山公园', '莲塘',
                          '清布', '清塘', '高增'],
        '广州地铁13号线': ['鱼珠', '裕丰围', '双岗', '南海神庙', '夏园', '南岗', '沙村', '白江', '新塘', '官湖',
                           '新沙'],
        '广州地铁14号线': ['嘉禾望岗', '白云东平', '夏良', '太和', '竹料', '钟落潭', '马沥', '新和', '太平', '神岗',
                           '邓村', '从化客运站', '东风'],
        '广州地铁14号线支线(知识城线)': ['新和', '红卫', '新南', '枫下', '知识城', '何棠下', '旺村', '汤村', '镇龙北',
                                         '镇龙'],
        '广州地铁18号线': ['冼村', '磨碟沙', '龙潭', '沙溪', '南村万博', '番禺广场', '横沥', '万顷沙'],
        '广州地铁21号线': ['员村', '天河公园', '棠东', '黄村', '大观南路', '天河智慧城', '神舟路', '科学城', '苏元',
                           '水西', '长平', '金坑', '镇龙西', '镇龙', '中新', '坑贝', '凤岗', '朱村', '山田', '钟岗',
                           '增城广场'], '广州地铁22号线': ['番禺广场', '市广路', '广州南站', '陈头岗'],
        '广州地铁APM线': ['林和西', '体育中心南', '天河南', '黄埔大道', '妇儿中心', '花城大道', '大剧院', '海心沙',
                          '广州塔'],
        '广州广佛线': ['新城东', '东平', '世纪莲', '澜石', '魁奇路', '季华园', '同济路', '祖庙', '普君北路', '朝安',
                       '桂城', '南桂路', '礌岗', '千灯湖', '金融高新区', '龙溪', '菊树', '西塱', '鹤洞', '沙涌', '沙园',
                       '燕岗', '石溪', '南洲', '沥滘']}
    # 对dijksrta算法处理后的最少换乘次数路径进行分割,得到子路径起点终点的列表和子路径所属地铁线的列表,并初始化完全路径
    stationList = path[::2]
    lineList = path[1::2]
    transferPath = [stationList[0]]

    # 遍历子路径起点终点的列表,对子路径进行补全并添加到完全路径列表中
    for i in range(len(lineList)):
        startNum = lineStation[lineList[i]].index(stationList[i])
        endNum = lineStation[lineList[i]].index(stationList[i + 1])
        if startNum > endNum:
            transferPath = transferPath + lineStation[lineList[i]][endNum:startNum][::-1]
        else:
            transferPath = transferPath + lineStation[lineList[i]][startNum + 1:endNum + 1]
    return transferPath


'''
用于返回路径总长度
适用于求最少换乘次数时得到路径而缺少路径总长度的情况
通过遍历路径,对前后两个站点的距离(邻接表字典的值)进行累加,得到路径长度
'''


def getDistance(path, graph):
    disSum = 0
    for i in range(len(path)):
        if i != len(path) - 1:
            disSum += graph[path[i]].subgraph[path[i + 1]]
    return disSum
